ReadMe File
Overview: My program has the basic features any image software would have. The controls for the 
first part of this project can be found in the file menu at the top of the screen. I have considered 
the fact that more options besides grayscale will become available, which can be added at the bottom of the 
grayscale button. The picture can be opened from a .png file, edited, then saved to the same file. The program has 
two choices for grayscaling, using either parallel programming or sequential. The program also has two choices for 
blurring an image, also using either parallel or sequential. Equalization was implemented and also has the option to 
either choose parallel or sequential computing and then was optimized. Red Eye Removal is not fully implemented and 
will not produce any results. Radix Sort is featured however it is not fully working. The last part implemented was the
seamless image clone which does not produce the right image.

File Types Supported: PNG

Bugs: Once again, a big fallback this program has is that you cannot undo any action, so any accidental move that needs
to be fixed is requird to completly reload the picture, losing all progress made. Also, be careful when entering the blur
filter values I rushed through that part of actually recieving the input values. Radix Sort does not work.

Extras: Sepia, Custom Blur Filter

										*UPDATE PHASE 5*
I could not get my optimized algorithm to produce a correct histogram and theres probably a couple reasons why. First,
i'll explain the strategy I planned to use. The only size tile that would work for this algorithm is 16*16, and we can
now use to local index to place the value of that index in the correct place in the collection of histograms. Therefore,
we have to have a global and local work group size that can work for this. To make sure htis works, I created a new variable
that I would use as the global width and global height that is the next hightest number divisible by 16 for both the height
and weight of the actual image. Essentially, I want my kernel to scan more than the image is and discard any indexes that
are overhanging the picture. Once I had this, I had all my parameters for the kernel that I was optimizing. Then, once the
create_histogram_kernel runs, it returns a collection of histograms that are all 0's. This is the bug that is causing my
code to crash, and I have ran out of time to de-bug my code.

										*UPDATE PHASE 6*
The code was not finished as I am getting the wrong values for when I run it sequentially, which I still have but is 
commented out. Radix Sort has also not been implemented so for this phase to be complete that also needs to be fixed.

										*UPDATE PHASe &*
Well I didn't get nearly as far as I wanted to but I guess thats how it goes. Seamless does not work fully I ran out
of time to really debug it. Optimized histogram is close, but there are still many more issues to fix. Sepia has been 
implemented, as well as the extra from the blur phase. To make sure my image clone recieves the right information, first
open the target image of the pool, then click on the seamless button and it will ask you which photo you want as the source.
Radix sort is implemented however it has a lot of issues. Issues with blur have been fixed. 
